name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  CACHE_VERSION: v2
  CI: true

jobs:
  # 代码质量检查作业
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline --no-audit --silent
        echo "✅ Dependencies installed"
        
    - name: TypeScript type check
      run: |
        echo "🔍 Running TypeScript type check..."
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit --incremental --pretty --skipLibCheck
          echo "✅ TypeScript type check passed"
        else
          echo "⚠️ No TypeScript configuration found, skipping"
        fi
        
    - name: ESLint check
      run: |
        echo "🔍 Running ESLint..."
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
          npx eslint . --ext .ts,.tsx,.js,.jsx --format=compact --max-warnings=0
          echo "✅ ESLint check passed"
        else
          echo "⚠️ No ESLint configuration found, skipping"
        fi
        
    - name: Prettier check
      run: |
        echo "🔍 Running Prettier check..."
        if [ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]; then
          npx prettier --check "**/*.{ts,tsx,js,jsx,json,md,yml,yaml}" --ignore-unknown
          echo "✅ Prettier check passed"
        else
          echo "⚠️ No Prettier configuration found, skipping"
        fi
        
    - name: Security audit
      run: |
        echo "🔒 Running security audit..."
        npm audit --audit-level=moderate || echo "⚠️ Security audit found issues, but continuing"
        echo "✅ Security audit completed"

  # 测试作业
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality-gate
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies for Node.js ${{ matrix.node-version }}..."
        npm ci --prefer-offline --no-audit --silent
        
    - name: Create environment file
      run: |
        echo "🔧 Creating environment configuration..."
        if [ -f ".env.example" ]; then
          cp .env.example .env
        fi
        
    - name: Run tests
      run: |
        echo "🧪 Running test suite..."
        if [ -f "jest.config.simple.js" ]; then
          npm test -- --config=jest.config.simple.js --passWithNoTests --silent
        elif [ -f "jest.config.js" ]; then
          npm test -- --passWithNoTests --silent
        else
          echo "⚠️ No test configuration found, skipping tests"
        fi
        echo "✅ Tests completed"
      continue-on-error: false

  # 文档构建作业
  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    needs: [quality-gate]
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline --no-audit --silent
        
    - name: Build documentation
      run: |
        echo "📚 Building documentation..."
        cd docs
        
        # 清理缓存
        rm -rf .vitepress/cache
        rm -rf .vitepress/dist
        rm -rf node_modules/.cache
        
        # 安装文档依赖
        npm ci --prefer-offline --no-audit --silent
        
        # 验证配置
        echo "🔍 Verifying VitePress configuration..."
        if grep -q "指南\|API参考\|用户手册\|技术参考" .vitepress/config.ts; then
          echo "✅ Configuration contains complete navigation"
        else
          echo "❌ Configuration may be incomplete"
          head -50 .vitepress/config.ts
        fi
        
        # 构建文档
        npm run build
        
        # 验证构建产物
        echo "🔍 Verifying build output..."
        if grep -q "指南\|API参考\|用户手册\|技术参考" .vitepress/dist/index.html; then
          echo "✅ Build output contains complete navigation"
        else
          echo "❌ Build output missing navigation"
        fi
        
        echo "✅ Documentation build completed"
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: docs/.vitepress/dist
        retention-days: 30

  # 项目构建作业
  project-build:
    name: Project Build
    runs-on: ubuntu-latest
    needs: [quality-gate, test-suite]
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline --no-audit --silent
        
    - name: Build project
      run: |
        echo "🔨 Building project..."
        if [ -f "package.json" ] && grep -q '"build"' package.json; then
          npm run build
          echo "✅ Project build completed"
        else
          echo "⚠️ No build script found, skipping project build"
        fi
        
    - name: Verify build artifacts
      run: |
        echo "🔍 Verifying build artifacts..."
        if [ -d "dist" ]; then
          echo "✅ Build directory exists"
          echo "📊 Build size: $(du -sh dist | cut -f1)"
          echo "📁 Build contents:"
          ls -la dist/ | head -10
        elif [ -d "build" ]; then
          echo "✅ Build directory exists (build/)"
          echo "📊 Build size: $(du -sh build | cut -f1)"
        else
          echo "⚠️ No build directory found"
        fi

  # 部署状态汇总
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [quality-gate, test-suite, docs-build, project-build]
    if: always()
    
    steps:
    - name: Generate deployment summary
      run: |
        echo "## 🚀 Enterprise CI/CD Pipeline Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 质量检查状态
        if [ "${{ needs.quality-gate.result }}" = "success" ]; then
          echo "✅ **Quality Gate**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Quality Gate**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 测试状态
        if [ "${{ needs.test-suite.result }}" = "success" ]; then
          echo "✅ **Test Suite**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Test Suite**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 文档构建状态
        if [ "${{ needs.docs-build.result }}" = "success" ]; then
          echo "✅ **Documentation Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Documentation Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 项目构建状态
        if [ "${{ needs.project-build.result }}" = "success" ]; then
          echo "✅ **Project Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Project Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Pipeline Metrics**:" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Trigger: \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Node.js: \`${{ env.NODE_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Timestamp: \`$(date -u)\`" >> $GITHUB_STEP_SUMMARY
