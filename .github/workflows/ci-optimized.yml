name: CI/CD Pipeline (Optimized)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  CACHE_VERSION: v1

jobs:
  # 代码质量检查作业
  quality-check:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline --no-audit
        echo "✅ Dependencies installed"
        
    - name: TypeScript type check
      run: |
        echo "🔍 Running TypeScript type check..."
        npx tsc --noEmit --incremental --pretty --skipLibCheck
        echo "✅ TypeScript type check passed"
        
    - name: ESLint check
      run: |
        echo "🔍 Running ESLint..."
        npx eslint . --ext .ts,.tsx,.js,.jsx --format=compact --max-warnings=0
        echo "✅ ESLint check passed"
        
    - name: Prettier check
      run: |
        echo "🔍 Running Prettier check..."
        npx prettier --check "**/*.{ts,tsx,js,jsx,json,md,yml,yaml}"
        echo "✅ Prettier check passed"
        
    - name: Security audit
      run: |
        echo "🔒 Running security audit..."
        npm audit --audit-level=moderate
        echo "✅ Security audit passed"

  # 测试作业
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality-check
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies for Node.js ${{ matrix.node-version }}..."
        npm ci --prefer-offline --no-audit
        
    - name: Create environment file
      run: |
        echo "🔧 Creating environment configuration..."
        cp .env.example .env
        
    - name: Run tests
      run: |
        echo "🧪 Running test suite..."
        if [ -f "jest.config.simple.js" ]; then
          npm test -- --config=jest.config.simple.js --passWithNoTests --coverage
        else
          npm test -- --passWithNoTests --coverage
        fi
        echo "✅ Tests completed"
      continue-on-error: false
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false

  # 构建作业
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline --no-audit
        
    - name: Build project
      run: |
        echo "🔨 Building project..."
        npm run build
        echo "✅ Build completed"
        
    - name: Verify build artifacts
      run: |
        echo "🔍 Verifying build artifacts..."
        if [ -d "dist" ]; then
          echo "✅ Build directory exists"
          echo "📊 Build size: $(du -sh dist | cut -f1)"
          echo "📁 Build contents:"
          ls -la dist/
        else
          echo "❌ Build directory not found"
          exit 1
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.sha }}
        path: |
          dist/
          package.json
          README.md
        retention-days: 30

  # 发布作业（仅在release时运行）
  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [quality-check, test, build]
    if: github.event_name == 'release'
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Build project
      run: npm run build
      
    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # 部署状态汇总
  deployment-status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [quality-check, test, build]
    if: always()
    
    steps:
    - name: Check deployment status
      run: |
        echo "## 🚀 CI/CD Pipeline Status Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.quality-check.result }}" = "success" ]; then
          echo "✅ **Code Quality**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Code Quality**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✅ **Test Suite**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Test Suite**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ **Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Pipeline Metrics**:" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Node.js: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
