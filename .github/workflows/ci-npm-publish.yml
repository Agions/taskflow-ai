name: CI/CD & NPM Publish

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  CI: true

jobs:
  # Ë¥®ÈáèÈó®ÊéßÂíåÊµãËØï
  quality-gate:
    name: Quality Gate & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies for Node.js ${{ matrix.node-version }}..."
        npm ci --prefer-offline --no-audit --silent
        
    - name: TypeScript type check
      run: |
        echo "üîç Running TypeScript type check..."
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit --incremental --pretty --skipLibCheck
          echo "‚úÖ TypeScript type check passed"
        else
          echo "‚ö†Ô∏è No TypeScript configuration found, skipping"
        fi
        
    - name: ESLint check
      run: |
        echo "üîç Running ESLint check..."
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
          npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0 --format stylish
          echo "‚úÖ ESLint check passed"
        else
          echo "‚ö†Ô∏è No ESLint configuration found, skipping"
        fi
        
    - name: Prettier format check
      run: |
        echo "üîç Running Prettier format check..."
        if [ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]; then
          npx prettier --check . --ignore-unknown
          echo "‚úÖ Prettier format check passed"
        else
          echo "‚ö†Ô∏è No Prettier configuration found, skipping"
        fi
        
    - name: Security audit
      run: |
        echo "üîí Running security audit..."
        npm audit --audit-level moderate --production
        echo "‚úÖ Security audit completed"
        
    - name: Run tests
      run: |
        echo "üß™ Running tests..."
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
          echo "‚úÖ Tests completed"
        else
          echo "‚ö†Ô∏è No test script found, skipping"
        fi
        
    - name: Build project
      run: |
        echo "üî® Building project..."
        if [ -f "package.json" ] && grep -q '"build"' package.json; then
          npm run build
          echo "‚úÖ Project build completed"
        else
          echo "‚ö†Ô∏è No build script found, skipping"
        fi

  # NPMÂèëÂ∏ÉÔºà‰ªÖÂú®tagÊé®ÈÄÅÊó∂Ôºâ
  npm-publish:
    name: NPM Publish
    runs-on: ubuntu-latest
    needs: quality-gate
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies for publishing..."
        npm ci --prefer-offline --no-audit --silent
        
    - name: Build for production
      run: |
        echo "üî® Building for production..."
        if [ -f "package.json" ] && grep -q '"build"' package.json; then
          npm run build
          echo "‚úÖ Production build completed"
        else
          echo "‚ö†Ô∏è No build script found"
        fi
        
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Verify package version
      run: |
        echo "üîç Verifying package version..."
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        TAG_VERSION="${{ steps.get_version.outputs.VERSION }}"
        echo "Package version: $PACKAGE_VERSION"
        echo "Tag version: $TAG_VERSION"
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "‚ùå Version mismatch: package.json ($PACKAGE_VERSION) != tag ($TAG_VERSION)"
          exit 1
        fi
        echo "‚úÖ Version verification passed"
        
    - name: Publish to NPM
      run: |
        echo "üì¶ Publishing to NPM..."
        npm publish --access public
        echo "‚úÖ Package published to NPM"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## TaskFlow AI v${{ steps.get_version.outputs.VERSION }}
          
          ### üöÄ Êñ∞ÂäüËÉΩ
          - Êü•Áúã [CHANGELOG.md](./CHANGELOG.md) Ëé∑ÂèñËØ¶ÁªÜÊõ¥Êñ∞ÂÜÖÂÆπ
          
          ### üì¶ ÂÆâË£ÖÊñπÂºè
          ```bash
          npm install taskflow-ai@${{ steps.get_version.outputs.VERSION }}
          ```
          
          ### üìö ÊñáÊ°£
          - [Âú®Á∫øÊñáÊ°£](https://agions.github.io/taskflow-ai/)
          - [APIÂèÇËÄÉ](https://agions.github.io/taskflow-ai/api/)
          - [Áî®Êà∑ÊåáÂçó](https://agions.github.io/taskflow-ai/user-guide/)
        draft: false
        prerelease: false

  # Áä∂ÊÄÅÊ±áÊÄª
  status-summary:
    name: Status Summary
    runs-on: ubuntu-latest
    needs: [quality-gate, npm-publish]
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## üéØ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Quality Gate & Testing | ${{ needs.quality-gate.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| NPM Publish | ${{ needs.npm-publish.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.quality-gate.result }}" = "success" ]; then
          echo "‚úÖ **Quality Gate**: All checks passed"
        else
          echo "‚ùå **Quality Gate**: Some checks failed"
        fi
        
        if [ "${{ startsWith(github.ref, 'refs/tags/v') }}" = "true" ]; then
          if [ "${{ needs.npm-publish.result }}" = "success" ]; then
            echo "‚úÖ **NPM Publish**: Package published successfully"
          else
            echo "‚ùå **NPM Publish**: Publishing failed"
          fi
        else
          echo "‚è≠Ô∏è **NPM Publish**: Skipped (not a tag push)"
        fi
