# Cursor AI Editor Rules for {{PROJECT_NAME}}
# Generated by TaskFlow AI v{{VERSION}} on {{DATE}}

## Project Context
You are working on {{PROJECT_NAME}}, a {{PROJECT_TYPE}} project.
{{PROJECT_DESCRIPTION}}

## Core Principles
- Write clean, maintainable, and well-documented code
- Follow established patterns and conventions for {{PROJECT_TYPE}} development
- Prioritize code readability and performance
- Implement comprehensive error handling and logging
- Use TypeScript for type safety when applicable

## Code Style & Standards
{{#if TYPESCRIPT}}
### TypeScript Guidelines
- Use strict TypeScript configuration
- Prefer interfaces over types for object shapes
- Use proper generic constraints and utility types
- Implement proper error handling with Result/Either patterns
- Document complex types with JSDoc comments

```typescript
// Preferred pattern for API responses
interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
  timestamp: Date;
}
```
{{/if}}

{{#if JAVASCRIPT}}
### JavaScript Guidelines
- Use ES6+ features consistently
- Implement proper async/await patterns
- Use destructuring and spread operators appropriately
- Follow functional programming principles where applicable
- Implement proper error boundaries
{{/if}}

{{#if REACT}}
### React Best Practices
- Use functional components with hooks
- Implement proper state management (Context API, Redux, Zustand)
- Follow component composition patterns
- Use proper prop validation with TypeScript or PropTypes
- Implement error boundaries for robust UX

```tsx
// Preferred component pattern
interface ComponentProps {
  title: string;
  onAction: (data: ActionData) => void;
}

export const Component: React.FC<ComponentProps> = ({ title, onAction }) => {
  // Component implementation
};
```
{{/if}}

{{#if NODE_API}}
### Node.js API Guidelines
- Use Express.js with proper middleware patterns
- Implement comprehensive input validation
- Use proper HTTP status codes and error responses
- Implement rate limiting and security headers
- Use structured logging with correlation IDs

```javascript
// Preferred API endpoint pattern
app.post('/api/resource', [
  validateInput,
  authenticate,
  authorize,
  async (req, res, next) => {
    try {
      const result = await service.createResource(req.body);
      res.status(201).json({ success: true, data: result });
    } catch (error) {
      next(error);
    }
  }
]);
```
{{/if}}

## AI Assistant Behavior
- Always suggest the most maintainable solution
- Provide code examples with proper error handling
- Explain complex logic with inline comments
- Suggest performance optimizations when relevant
- Recommend testing strategies for new code
- Consider accessibility and security implications
- Suggest refactoring opportunities for better code organization

## Code Review Focus Areas
1. **Security**: Check for vulnerabilities, input validation, authentication
2. **Performance**: Identify bottlenecks, suggest optimizations
3. **Maintainability**: Ensure code is readable and well-structured
4. **Testing**: Verify test coverage and quality
5. **Documentation**: Ensure proper documentation and comments
6. **Standards**: Adherence to project coding standards

## Documentation Standards
- Use JSDoc for function and class documentation
- Include usage examples in README files
- Document API endpoints with OpenAPI/Swagger
- Maintain CHANGELOG.md for version tracking
- Include setup and deployment instructions

## Testing Guidelines
{{#if JEST}}
- Use Jest for unit and integration testing
- Maintain minimum 80% code coverage
- Write descriptive test names and organize in describe blocks
- Use proper mocking for external dependencies
- Implement snapshot testing for UI components

```javascript
describe('ComponentName', () => {
  it('should handle user interaction correctly', async () => {
    // Test implementation
  });
});
```
{{/if}}

## File Organization
```
{{PROJECT_NAME}}/
├── src/
│   ├── components/     # Reusable UI components
│   ├── pages/         # Page-level components
│   ├── services/      # API and business logic
│   ├── utils/         # Utility functions
│   ├── types/         # TypeScript type definitions
│   └── constants/     # Application constants
├── tests/
│   ├── unit/          # Unit tests
│   ├── integration/   # Integration tests
│   └── e2e/          # End-to-end tests
├── docs/
│   ├── api/           # API documentation
│   ├── guides/        # User guides
│   └── architecture/ # Technical documentation
└── config/           # Configuration files
```

## Performance Considerations
- Implement lazy loading for large components
- Use proper caching strategies
- Optimize bundle size with tree shaking
- Implement proper database indexing
- Use CDN for static assets
- Monitor and profile application performance

## Security Best Practices
- Validate all user inputs
- Use HTTPS for all communications
- Implement proper authentication and authorization
- Sanitize data before database operations
- Use environment variables for sensitive configuration
- Implement proper CORS policies
- Regular security audits and dependency updates

## Deployment & DevOps
- Use containerization with Docker
- Implement CI/CD pipelines
- Use infrastructure as code
- Implement proper monitoring and logging
- Use blue-green or rolling deployments
- Implement proper backup and disaster recovery

## When Suggesting Code Changes
1. Always explain the reasoning behind suggestions
2. Provide before/after examples when helpful
3. Consider the impact on existing code
4. Suggest incremental improvements over major rewrites
5. Include relevant documentation updates
6. Consider testing implications of changes

## Project-Specific Notes
{{PROJECT_SPECIFIC_NOTES}}

---
*This configuration was generated by TaskFlow AI. Modify as needed for your specific requirements.*
