# TaskFlow AI - 生产环境 Docker Compose 配置
# 企业级生产部署，包含监控、日志和安全配置

version: '3.8'

# ============================================================================
# 网络配置
# ============================================================================
networks:
  taskflow-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
  monitoring-network:
    driver: bridge
    internal: true

# ============================================================================
# 卷配置
# ============================================================================
volumes:
  taskflow-prod-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/taskflow/data
  taskflow-prod-config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/taskflow/config
  taskflow-prod-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/taskflow/logs
  redis-prod-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ============================================================================
# 生产服务定义
# ============================================================================
services:
  # 主应用服务
  taskflow-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
    image: taskflow-ai:${VERSION:-latest}
    container_name: taskflow-ai-app
    restart: always
    
    # 环境变量
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - TASKFLOW_CONFIG_DIR=/app/.taskflow
      - TASKFLOW_DATA_DIR=/app/data
      - TASKFLOW_LOG_FILE=/app/logs/taskflow.log
      
      # 生产环境配置
      - TASKFLOW_ENABLE_CLUSTERING=true
      - TASKFLOW_CLUSTER_WORKERS=4
      - TASKFLOW_ENABLE_COMPRESSION=true
      - TASKFLOW_ENABLE_RATE_LIMITING=true
      - TASKFLOW_MAX_REQUESTS_PER_MINUTE=100
      
      # Redis配置
      - TASKFLOW_REDIS_URL=redis://redis-prod:6379
      - TASKFLOW_ENABLE_REDIS_CACHE=true
      
      # 监控配置
      - TASKFLOW_ENABLE_METRICS=true
      - TASKFLOW_METRICS_PORT=9464
      - TASKFLOW_ENABLE_HEALTH_CHECK=true
      
      # AI模型配置（从secrets读取）
      - TASKFLOW_DEEPSEEK_API_KEY_FILE=/run/secrets/deepseek_api_key
      - TASKFLOW_ZHIPU_API_KEY_FILE=/run/secrets/zhipu_api_key
      - TASKFLOW_QWEN_API_KEY_FILE=/run/secrets/qwen_api_key
    
    # 端口映射
    ports:
      - "3000:3000"
      - "9464:9464"  # Prometheus metrics
    
    # 卷挂载
    volumes:
      - taskflow-prod-data:/app/data
      - taskflow-prod-config:/app/.taskflow
      - taskflow-prod-logs:/app/logs
    
    # 网络
    networks:
      - taskflow-prod-network
      - monitoring-network
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # 安全配置
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
    
    # Secrets
    secrets:
      - deepseek_api_key
      - zhipu_api_key
      - qwen_api_key
    
    # 依赖服务
    depends_on:
      redis-prod:
        condition: service_healthy
    
    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis缓存服务
  redis-prod:
    image: redis:7-alpine
    container_name: taskflow-redis-prod
    restart: always
    
    # 端口映射（内部网络）
    expose:
      - "6379"
    
    # 卷挂载
    volumes:
      - redis-prod-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    # 网络
    networks:
      - taskflow-prod-network
    
    # Redis生产配置
    command: redis-server /usr/local/etc/redis/redis.conf
    
    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # 安全配置
    security_opt:
      - no-new-privileges:true

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: taskflow-nginx
    restart: always
    
    # 端口映射
    ports:
      - "80:80"
      - "443:443"
    
    # 卷挂载
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - taskflow-prod-logs:/var/log/nginx
    
    # 网络
    networks:
      - taskflow-prod-network
    
    # 依赖服务
    depends_on:
      - taskflow-app
    
    # 健康检查
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: taskflow-prometheus
    restart: always
    
    # 端口映射
    ports:
      - "9090:9090"
    
    # 卷挂载
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    # 网络
    networks:
      - monitoring-network
    
    # 命令参数
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: taskflow-grafana
    restart: always
    
    # 端口映射
    ports:
      - "3001:3000"
    
    # 环境变量
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    
    # 卷挂载
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    # 网络
    networks:
      - monitoring-network
    
    # Secrets
    secrets:
      - grafana_admin_password
    
    # 依赖服务
    depends_on:
      - prometheus

# ============================================================================
# Secrets配置
# ============================================================================
secrets:
  deepseek_api_key:
    file: ./secrets/deepseek_api_key.txt
  zhipu_api_key:
    file: ./secrets/zhipu_api_key.txt
  qwen_api_key:
    file: ./secrets/qwen_api_key.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt
