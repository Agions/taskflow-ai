# TaskFlow AI - Docker Compose 配置
# 支持本地开发和生产部署

version: '3.8'

# ============================================================================
# 网络配置
# ============================================================================
networks:
  taskflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# 卷配置
# ============================================================================
volumes:
  taskflow-data:
    driver: local
  taskflow-config:
    driver: local
  taskflow-logs:
    driver: local
  taskflow-cache:
    driver: local

# ============================================================================
# 服务定义
# ============================================================================
services:
  # 生产环境服务
  taskflow-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
    image: taskflow-ai:latest
    container_name: taskflow-ai-prod
    restart: unless-stopped
    
    # 环境变量
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - TASKFLOW_CONFIG_DIR=/app/.taskflow
      - TASKFLOW_DATA_DIR=/app/data
      - TASKFLOW_LOG_FILE=/app/logs/taskflow.log
      
      # AI模型配置（从环境变量或.env文件读取）
      - TASKFLOW_DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      - TASKFLOW_ZHIPU_API_KEY=${ZHIPU_API_KEY:-}
      - TASKFLOW_QWEN_API_KEY=${QWEN_API_KEY:-}
      - TASKFLOW_BAIDU_API_KEY=${BAIDU_API_KEY:-}
      - TASKFLOW_MOONSHOT_API_KEY=${MOONSHOT_API_KEY:-}
      
      # 性能配置
      - TASKFLOW_ENABLE_PERFORMANCE_MONITORING=true
      - TASKFLOW_MAX_REQUESTS_PER_MINUTE=100
    
    # 端口映射
    ports:
      - "3000:3000"
    
    # 卷挂载
    volumes:
      - taskflow-data:/app/data
      - taskflow-config:/app/.taskflow
      - taskflow-logs:/app/logs
      - taskflow-cache:/app/.cache
    
    # 网络
    networks:
      - taskflow-network
    
    # 健康检查
    healthcheck:
      test: ["CMD", "taskflow", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # 安全配置
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # 开发环境服务
  taskflow-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        - NODE_ENV=development
    image: taskflow-ai:dev
    container_name: taskflow-ai-dev
    restart: unless-stopped
    
    # 环境变量
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - TASKFLOW_CONFIG_DIR=/app/.taskflow
      - TASKFLOW_DATA_DIR=/app/data
      - TASKFLOW_LOG_FILE=/app/logs/taskflow.log
      
      # 开发模式配置
      - DEBUG=taskflow:*
      - TASKFLOW_ENABLE_HOT_RELOAD=true
      
      # AI模型配置
      - TASKFLOW_DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      - TASKFLOW_ZHIPU_API_KEY=${ZHIPU_API_KEY:-}
    
    # 端口映射（包括调试端口）
    ports:
      - "3001:3000"
      - "9229:9229"  # Node.js调试端口
    
    # 卷挂载（包括源码挂载用于热重载）
    volumes:
      - .:/app
      - /app/node_modules  # 防止本地node_modules覆盖容器内的
      - taskflow-data:/app/data
      - taskflow-logs:/app/logs
    
    # 网络
    networks:
      - taskflow-network
    
    # 工作目录
    working_dir: /app
    
    # 开发命令
    command: ["npm", "run", "dev"]
    
    # 标准输入保持打开
    stdin_open: true
    tty: true

  # Redis缓存服务（可选，用于大规模部署）
  redis:
    image: redis:7-alpine
    container_name: taskflow-redis
    restart: unless-stopped
    
    # 端口映射
    ports:
      - "6379:6379"
    
    # 卷挂载
    volumes:
      - taskflow-cache:/data
    
    # 网络
    networks:
      - taskflow-network
    
    # Redis配置
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # 监控服务（可选）
  monitoring:
    image: prom/prometheus:latest
    container_name: taskflow-monitoring
    restart: unless-stopped
    
    # 端口映射
    ports:
      - "9090:9090"
    
    # 网络
    networks:
      - taskflow-network
    
    # 配置文件挂载
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    
    # 命令参数
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    
    # 仅在需要监控时启用
    profiles:
      - monitoring
