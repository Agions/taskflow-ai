# TaskFlow AI - 开发环境 Docker Compose 配置
# 专为本地开发优化，支持热重载和调试

version: '3.8'

# ============================================================================
# 网络配置
# ============================================================================
networks:
  taskflow-dev-network:
    driver: bridge

# ============================================================================
# 卷配置
# ============================================================================
volumes:
  taskflow-dev-data:
    driver: local
  taskflow-dev-logs:
    driver: local
  node-modules-cache:
    driver: local

# ============================================================================
# 开发服务定义
# ============================================================================
services:
  # 主开发服务
  taskflow-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        - NODE_ENV=development
    image: taskflow-ai:dev
    container_name: taskflow-ai-dev
    restart: unless-stopped
    
    # 环境变量
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - DEBUG=taskflow:*
      - TASKFLOW_CONFIG_DIR=/app/.taskflow
      - TASKFLOW_DATA_DIR=/app/data
      - TASKFLOW_LOG_FILE=/app/logs/taskflow.log
      
      # 开发模式特定配置
      - TASKFLOW_ENABLE_HOT_RELOAD=true
      - TASKFLOW_ENABLE_DEBUG_MODE=true
      - TASKFLOW_WATCH_FILES=true
      
      # AI模型配置（从.env.development读取）
      - TASKFLOW_DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      - TASKFLOW_ZHIPU_API_KEY=${ZHIPU_API_KEY:-}
      - TASKFLOW_QWEN_API_KEY=${QWEN_API_KEY:-}
      
      # 性能配置（开发环境放宽限制）
      - TASKFLOW_MAX_REQUESTS_PER_MINUTE=1000
      - TASKFLOW_ENABLE_PERFORMANCE_MONITORING=false
    
    # 端口映射
    ports:
      - "3001:3000"      # 应用端口
      - "9229:9229"      # Node.js调试端口
      - "5173:5173"      # VitePress文档端口
    
    # 卷挂载（源码热重载）
    volumes:
      # 源码挂载
      - .:/app
      - node-modules-cache:/app/node_modules
      
      # 数据持久化
      - taskflow-dev-data:/app/data
      - taskflow-dev-logs:/app/logs
      
      # 排除不需要同步的目录
      - /app/dist
      - /app/coverage
      - /app/.git
    
    # 网络
    networks:
      - taskflow-dev-network
    
    # 工作目录
    working_dir: /app
    
    # 开发命令
    command: ["npm", "run", "dev"]
    
    # 保持容器运行
    stdin_open: true
    tty: true
    
    # 依赖服务
    depends_on:
      - redis-dev

  # 文档开发服务
  docs-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: taskflow-ai:dev
    container_name: taskflow-docs-dev
    restart: unless-stopped
    
    # 环境变量
    environment:
      - NODE_ENV=development
    
    # 端口映射
    ports:
      - "5174:5173"  # VitePress开发服务器
    
    # 卷挂载
    volumes:
      - ./docs:/app/docs
      - node-modules-cache:/app/docs/node_modules
    
    # 网络
    networks:
      - taskflow-dev-network
    
    # 工作目录
    working_dir: /app/docs
    
    # 文档开发命令
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]
    
    # 保持容器运行
    stdin_open: true
    tty: true

  # Redis开发缓存
  redis-dev:
    image: redis:7-alpine
    container_name: taskflow-redis-dev
    restart: unless-stopped
    
    # 端口映射
    ports:
      - "6380:6379"  # 避免与生产Redis冲突
    
    # 卷挂载
    volumes:
      - taskflow-dev-data:/data
    
    # 网络
    networks:
      - taskflow-dev-network
    
    # Redis开发配置
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    
    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # 测试运行器
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: taskflow-ai:dev
    container_name: taskflow-test-runner
    
    # 环境变量
    environment:
      - NODE_ENV=test
      - CI=true
    
    # 卷挂载
    volumes:
      - .:/app
      - node-modules-cache:/app/node_modules
      - /app/coverage  # 测试覆盖率输出
    
    # 网络
    networks:
      - taskflow-dev-network
    
    # 工作目录
    working_dir: /app
    
    # 测试命令
    command: ["npm", "run", "test:watch"]
    
    # 仅在需要时启动
    profiles:
      - testing

  # 代码质量检查
  quality-check:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: taskflow-ai:dev
    container_name: taskflow-quality-check
    
    # 环境变量
    environment:
      - NODE_ENV=development
    
    # 卷挂载
    volumes:
      - .:/app
      - node-modules-cache:/app/node_modules
    
    # 网络
    networks:
      - taskflow-dev-network
    
    # 工作目录
    working_dir: /app
    
    # 质量检查命令
    command: ["npm", "run", "quality"]
    
    # 仅在需要时启动
    profiles:
      - quality

# ============================================================================
# 开发环境扩展配置
# ============================================================================
# 使用方法：
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up taskflow-dev
# docker-compose -f docker-compose.dev.yml up  # 仅开发环境
# docker-compose -f docker-compose.dev.yml --profile testing up  # 包含测试
# docker-compose -f docker-compose.dev.yml --profile quality up  # 包含质量检查
