import { Command } from 'commander';
import path from 'path';
import fs from 'fs-extra';
import chalk from 'chalk';
import ora from 'ora';
import inquirer from 'inquirer';

import { ProjectTemplateManager } from '../core/templates/project-template-manager';
import { EditorConfigGenerator } from '../core/templates/editor-config-generator';
import { ProgrammingLanguage, ProjectType } from '../core/templates/ai-rules-generator';
// 移除未使用的导入

/**
 * 项目初始化命令
 * 支持多种项目模板和AI编辑器配置生成
 */
export default function initCommand(program: Command): void {
  program
    .command('init [directory]')
    .description('初始化一个新的TaskFlow AI项目')
    .option('-f, --force', '强制初始化，覆盖已存在的配置')
    .option('-t, --template <template>', '项目模板 (web-app, api, mobile, ai-ml)', 'web-app')
    .option('-l, --language <language>', 'AI规则语言 (typescript, python, java, go, rust)', 'typescript')
    .option('-e, --editor <editor>', 'AI编辑器配置 (windsurf, trae, cursor, vscode, all)', 'windsurf,trae,cursor,vscode')
    .option('--no-examples', '不创建示例文件')
    .option('--no-git', '不初始化Git仓库')
    .option('--no-install', '不自动安装依赖')
    .action(async (directory = '.', options) => {
      try {
        const spinner = ora('正在初始化TaskFlow AI项目...').start();

        // 确定目标目录的绝对路径
        const targetDir = path.resolve(process.cwd(), directory);
        const projectName = path.basename(targetDir);

        // 检查目录是否存在，如果不存在则创建
        if (!fs.existsSync(targetDir)) {
          spinner.text = `创建项目目录 ${targetDir}...`;
          fs.mkdirSync(targetDir, { recursive: true });
        }

        // 检查是否已经存在配置文件
        const configPath = path.join(targetDir, 'taskflow.config.json');
        if (fs.existsSync(configPath) && !options.force) {
          spinner.stop();
          const { overwrite } = await inquirer.prompt([
            {
              type: 'confirm',
              name: 'overwrite',
              message: '项目配置文件已存在，是否覆盖?',
              default: false,
            },
          ]);

          if (!overwrite) {
            console.log(chalk.yellow('初始化已取消'));
            return;
          }
          spinner.start('正在覆盖已有配置...');
        }

        // 初始化项目模板管理器
        const templateManager = new ProjectTemplateManager();
        const editorGenerator = new EditorConfigGenerator();

        // 获取可用模板列表
        const availableTemplates = templateManager.getAvailableTemplates();

        // 验证模板选择
        if (!availableTemplates.includes(options.template)) {
          spinner.stop();
          console.log(chalk.red(`❌ 不支持的模板类型: ${options.template}`));
          console.log(chalk.yellow(`可用模板: ${availableTemplates.join(', ')}`));
          return;
        }

        // 生成项目结构
        spinner.text = `使用 ${options.template} 模板生成项目结构...`;
        await templateManager.generateProject(targetDir, options.template, projectName, {
          examples: options.examples,
          git: options.git,
          install: options.install
        });

        // 生成AI编辑器配置
        spinner.text = '生成AI编辑器配置文件...';
        const editorVariables = {
          PROJECT_NAME: projectName,
          PROJECT_TYPE: options.template,
          PROJECT_DESCRIPTION: `${options.template} project generated by TaskFlow AI`,
          DATE: new Date().toISOString().split('T')[0],
          VERSION: '1.3.0',
          TYPESCRIPT: true,
          JAVASCRIPT: false,
          REACT: options.template === 'web-app',
          NODE_API: options.template === 'api',
          JEST: true,
          YAML: true,
          BASH: true,
          PORT: 3000,
          PROJECT_SPECIFIC_NOTES: `This is a ${options.template} project. Follow best practices for ${options.template} development.`
        };

        // 生成指定编辑器配置
        const supportedEditors = ['windsurf', 'trae', 'cursor', 'vscode'];
        let editors: string[] = [];

        if (options.editor === 'all') {
          editors = supportedEditors;
        } else {
          editors = options.editor.split(',').map((e: string) => e.trim());
        }

        // 验证编辑器选项
        const invalidEditors = editors.filter(editor => !supportedEditors.includes(editor));
        if (invalidEditors.length > 0) {
          spinner.stop();
          console.log(chalk.red(`❌ 不支持的编辑器: ${invalidEditors.join(', ')}`));
          console.log(chalk.yellow(`支持的编辑器: ${supportedEditors.join(', ')}`));
          return;
        }

        // 生成编辑器配置
        for (const editor of editors) {
          await editorGenerator.generateEditorConfig(targetDir, editor, editorVariables);
        }

        // 生成基于语言的AI规则
        spinner.text = '生成AI编程规则...';
        const language = mapLanguage(options.language);
        const projectType = mapProjectType(options.template);
        const features = getProjectFeatures(options.template);

        await editorGenerator.generateLanguageSpecificAIRules(
          targetDir,
          language,
          projectType,
          projectName,
          features
        );

        // 创建TaskFlow配置文件
        spinner.text = '生成TaskFlow配置文件...';
        const taskflowConfig = {
          project: {
            name: projectName,
            type: options.template,
            version: '1.0.0',
            description: `${options.template} project generated by TaskFlow AI`,
            createdAt: new Date().toISOString()
          },
          ai: {
            models: {
              default: 'deepseek',
              multiModel: {
                enabled: true,
                primary: 'deepseek',
                fallback: ['zhipu', 'qwen']
              }
            }
          },
          parsing: {
            language: 'zh',
            includeTests: true,
            includeDocs: true
          },
          planning: {
            teamSize: 5,
            sprintDuration: 14,
            workingHours: 8
          }
        };

        await fs.writeFile(
          path.join(targetDir, 'taskflow.config.json'),
          JSON.stringify(taskflowConfig, null, 2)
        );

        spinner.succeed(`🎉 TaskFlow AI项目初始化完成！`);

        console.log(`
${chalk.cyan('📁 项目信息:')}
  名称: ${chalk.green(projectName)}
  类型: ${chalk.green(options.template)}
  位置: ${chalk.green(targetDir)}

${chalk.cyan('🤖 AI编辑器配置:')}
  ${editors.length === supportedEditors.length ? '✅ 已生成所有编辑器配置' : `✅ 已生成 ${editors.join(', ')} 配置`}
  - Windsurf: .windsurf/settings.json, mcp.json, ai-config.json
  - Trae: .trae/config.json, mcp.json, workflows.json
  - Cursor: .cursor-rules
  - VSCode: .vscode/settings.json, extensions.json

${chalk.cyan('🔗 MCP服务集成:')}
  ${editors.includes('windsurf') || editors.includes('trae') ? '✅ MCP服务配置已生成' : '⚠️  选择Windsurf或Trae以启用MCP服务'}
  - 多模型任务编排
  - 智能任务分解
  - 实时状态同步
  - 团队协作功能

${chalk.cyan('🚀 后续步骤:')}
1. ${chalk.yellow(`cd ${directory !== '.' ? directory : projectName}`)}
2. ${chalk.yellow('npm install')} ${options.install === false ? '(手动安装依赖)' : '(已自动安装)'}
3. ${chalk.yellow('taskflow-ai config set models.apiKeys.deepseek "your-api-key"')}
4. ${chalk.yellow('npm run dev')} 启动开发服务器
5. ${chalk.yellow('taskflow-ai parse ./docs/README.md')} 解析项目文档

${chalk.cyan('📚 文档:')}
  - README.md: 项目说明和使用指南
  - docs/: 项目文档目录
  - taskflow.config.json: TaskFlow AI配置文件

${chalk.gray('Generated by TaskFlow AI v1.3.0')}
        `);

      } catch (error) {
        console.error(chalk.red('初始化失败:'), error);
        process.exit(1);
      }
    });
}

/**
 * 映射语言字符串到ProgrammingLanguage枚举
 */
function mapLanguage(language: string): ProgrammingLanguage {
    const languageMap: Record<string, ProgrammingLanguage> = {
      'typescript': ProgrammingLanguage.TYPESCRIPT,
      'javascript': ProgrammingLanguage.JAVASCRIPT,
      'python': ProgrammingLanguage.PYTHON,
      'java': ProgrammingLanguage.JAVA,
      'go': ProgrammingLanguage.GO,
      'rust': ProgrammingLanguage.RUST,
      'csharp': ProgrammingLanguage.CSHARP,
      'php': ProgrammingLanguage.PHP
    };

    return languageMap[language.toLowerCase()] || ProgrammingLanguage.TYPESCRIPT;
  }

/**
 * 映射项目模板到ProjectType枚举
 */
function mapProjectType(template: string): ProjectType {
    const typeMap: Record<string, ProjectType> = {
      'web-app': ProjectType.WEB_APP,
      'api': ProjectType.API,
      'mobile': ProjectType.MOBILE,
      'ai-ml': ProjectType.AI_ML
    };

    return typeMap[template] || ProjectType.WEB_APP;
  }

/**
 * 根据模板获取项目特性
 */
function getProjectFeatures(template: string): string[] {
    const features: Record<string, string[]> = {
      'web-app': ['frontend', 'responsive', 'pwa', 'testing'],
      'api': ['rest-api', 'authentication', 'database', 'testing'],
      'mobile': ['mobile-ui', 'responsive', 'offline', 'testing'],
      'ai-ml': ['machine-learning', 'data-processing', 'api', 'testing']
    };

    return features[template] || ['basic', 'testing'];
}


